---
title: "Homework 1"
author: "John French"
format:
  html:
    toc: true
    toc-location: left
    self-contained: true
jupyter: python3
---

Professional wrestling, while not everyone's cup of tea, is big business. 
What started as a carnival act has turned into a global entertainment industry. 
Netflix recently started showing Monday Night Raw, a program from the biggest North 
American wrestling company, WWE -- this deal is reportedly worth ~$5 billion. 
Like any large entity, WWE is not without competition, drama, and scandal. 

## General Tips

This is very much a step-by-step process. 
Don't go crazy trying to get everything done with as few lines as possible. 
Read the documentation for the AlphaVantage api! Carefully explore the pages from 
cagematch. There isn't a need to get too fancy with anything here -- just go with 
simple function and all should be good. Don't print comments, but use normal text 
for explanations.

## Step 1

In the `calls` folder, you'll find 4 text files -- these are transcripts from 
quarterly earnings calls. Read those files in (glob.glob will be very helpful here), 
with appropriate column names for ticker, quarter, and year columns; this should be 
done within a single function. Perform any data cleaning that you find necessary. 

```{python}
import glob as glob
import pandas as pd
import os

file_with_files = glob.glob("C:/Users/John/Downloads/calls/*.txt")

files = []

for file in file_with_files:
  file = file.replace('\\', "/")
  file_name = os.path.basename(file)
  file_name = file_name.replace(".txt", "")
  files.append(file_name)
  
number_of_files = len(files)

def file_readin (file_n):
  split_text = file_n.split("_")
  with open((file_n), 'r') as file:
    content = file.read()
  split_text.append(content)
  return split_text

file_df = []

for file in file_with_files:
  file_df += file_readin(file)

grouped_objects = []
for i in range(0, len(file_df), 4):
    grouped_objects.append(file_df[i:i + 4])

final_file_df = pd.DataFrame(grouped_objects, columns=['ticker', 'quarter', 'year', 'content'])

final_file_df["year"] = final_file_df["year"].str.replace('.txt', '', regex=False)

final_file_df["ticker"] = final_file_df["ticker"].str.split('\\').str[-1]

final_file_df
```

## Step 2

Use the AlphaVantage api to get daily stock prices for WWE and related tickers 
for the last 5 years -- pay attention to your data. You cannot use any AlphaVantage 
packages (i.e., you can only use requests to grab the data). Tell me about the general 
trend that you are seeing. I don't care which viz package you use, but plotly is solid 
and plotnine is good for ggplot2 users.

```{python}
#| eval: false
import requests 
import plotnine as p9
import plotly.express as px
import pandas as pd
import nbformat

wwe_stock_url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&time_from=20200204T0130&symbol=WWE&outputsize=full&apikey=9IIFJ7F48E4KEL4G'
stock_r = requests.get(wwe_stock_url)
wwe_qtr_stock = stock_r.json()

wwe_qtr_stock = pd.DataFrame(wwe_qtr_stock['Time Series (Daily)']).T

plot_df = wwe_qtr_stock.reset_index()

# Rename columns for clarity
plot_df.columns = ["Date", "Open", "High", "Low", "Close", "Volume"]

# Convert Date to datetime format (for better plotting)
plot_df["Date"] = pd.to_datetime(plot_df["Date"])

# Convert Close price to float (ensure numeric values for plotting)
plot_df["Close"] = plot_df["Close"].astype(float)

fig = px.line(plot_df, x="Date", y="Close", title="Sales Over Time")
fig
```

## Step 3

Just like every other nerdy hobby, professional wrestling draws dedicated fans.
 Wrestling fans often go to cagematch.net to leave reviews for matches, shows, 
 and wrestlers. The following link contains the top 100 matches on cagematch:
  https://www.cagematch.net/?id=111&view=statistics

* What is the correlation between WON ratings and cagematch ratings?
0.205

** Which wrestler has the most matches in the top 100?
Kenny Omega

*** Which promotion has the most matches in the top 100?
New Japan Pro Wrestling

**** What is each promotion's average WON rating?
Average Rating for each promotion:
Promotion
All Elite Wrestling                     9.575000
All Japan Pro Wrestling                 9.603333
All Japan Women's Pro-Wrestling         9.540000
DDT Pro Wrestling                       9.570000
GAEA Japan                              9.570000
JTO                                     9.480000
Japanese Women Pro-Wrestling Project    9.550000
Lucha Underground                       9.560000
New Japan Pro Wrestling                 9.620000
Pro Wrestling NOAH                      9.640000
Ring Of Honor                           9.570000
Total Nonstop Action Wrestling          9.640000
World Championship Wrestling            9.490000
World Wonder Ring Stardom               9.515000
World Wrestling Entertainment           9.578571
Name: Rating, dtype: float64

***** Select any single match and get the comments and ratings for that match into 
a data frame.

```{python}
from bs4 import BeautifulSoup
import requests
import pandas as pd


cm_request = requests.get('https://www.cagematch.net/?id=111&view=statistics')

cm_soup = BeautifulSoup(cm_request.content, features = "html.parser")

# # = id , . = class, select = most important method for all of beautiful soup

cm_top100_v2 = cm_soup.select_one('.Table')

cm_top100 = cm_soup.select('tr')

cm_top_df = []

for row in cm_top100:
  # Extract columns within the row (e.g., <td> elements)
  cols = row.select('td')  # Assuming data is in <td> tags
  
  img_tag = row.select('img')  # Assuming data is in <img> tags
  
  data_row = []
  if len(cols) > 0:  # Check if the row contains data
    data_row = [col.get_text(strip=True) for col in cols]
    if len(img_tag) > 0:
      data_row[2] = img_tag[0].get('alt')  # Assuming the image alt text is needed
    cm_top_df.append(data_row)

cm_tb_range = range(0, len(cm_top100))

cm_df = pd.DataFrame(cm_top_df)

print(cm_df)
```

Data Cleaning for computations in questions
```{python}
import re
from fractions import Fraction

cm_df.columns = cm_df.iloc[0]  # Set first row as column names
cm_df = cm_df[1:].reset_index(drop=True)  # Remove first row and reset index

import re
from fractions import Fraction

update_won = []

# Converting the stars into an actual rating for computations
for var in cm_df["WON"]:
  amount_of_stars = var.count("*")
  match = re.search("\d+(/\d+)?", var)
  decimal = float(Fraction(match.group())) if match else 0
  update_won.append(amount_of_stars + decimal)

cm_df["WON"] = update_won
cm_df["Rating"] = cm_df["Rating"].astype(float)

```

```{python}
# Separating out all wrestlers in the column

name_pattern = r'[A-Z][a-z]+(?:\s[A-Z][a-z]+)*'

cm_df['Names'] = cm_df['Match fixture'].apply(lambda x: re.findall(name_pattern, x))
```

```{python}
import numpy as np
from collections import Counter

# Correlation between WON ratings and cagematch ratings
cm_df["WON"].corr(cm_df["Rating"])

# Find the wrestler with the most matches in the top 100
all_names = sum(cm_df["Names"], [])
wrestler_counts = Counter(all_names)

# Find the promotion with the most matches in the top 100
promotion_counts = cm_df["Promotion"].value_counts()  # Assuming promotion names are in column 5
top_promotion = promotion_counts.idxmax()
print(f"Promotion with the most matches in the top 100: {top_promotion}")

# Calculate each promotion's average WON rating
promotion_avg_won = cm_df.groupby("Promotion")["Rating"].mean()  # Group by promotion and calculate mean of WON ratings
print("Average Rating for each promotion:")
print(promotion_avg_won)
```

```{python}
# Select a single match and get comments and ratings for that match
match_id = '8034'  # Replace with actual match ID
match_url = f'https://www.cagematch.net/?id=111&nr={match_id}'
match_request = requests.get(match_url)
match_soup = BeautifulSoup(match_request.content, features="html.parser")

ratings = match_soup.select('div', class_='RatingsBoxAdjustedRating Rating Color9')

comments_section = match_soup.select('div', class_='LayoutBody')

comments = comments_section[0].select('div', class_='CommentBox', id_ = "commentBox")

comments_list = [comment.get_text(strip=True) for comment in comments]
ratings_list = [rating.get_text(strip=True) for rating in ratings]
```

## Step 4

You can't have matches without wrestlers. The following link contains the top 100 
wrestlers, according to cagematch: https://www.cagematch.net/?id=2&view=statistics

*** Of the top 100, who has wrestled the most matches?
Kenta Kobashi
***** Of the top 100, which wrestler has the best win/loss?
Hiroshi Tanahashi

```{python}

wrestler_request = requests.get('https://www.cagematch.net/?id=2&view=statistics')

wrestler_soup = BeautifulSoup(wrestler_request.content, features = "html.parser")

wrestler_top100_v2 = wrestler_soup.select_one('.Table')

wrestler_top100 = wrestler_top100_v2.find_all('tr')

wrestler_top100_df = []

for trow in wrestler_top100: # Extract columns "td" in the rows
  tcols = trow.find_all('td')  # Assuming data is in <td> tags
  tdata_row = [tcol.get_text(strip=True) for tcol in tcols]
  wrestler_top100_df.append(tdata_row)

wrestler_tb_range = range(1, len(wrestler_top100))

wrestler_df = pd.DataFrame(wrestler_top100_df)

print(wrestler_df)
```

```{python}
wrestler_df_sorted_1st_question = wrestler_df.sort_values(by=6, ascending=False)

wrestler_df_sorted_2nd_question = wrestler_df.sort_values(by=7, ascending=False)
```

## Step 5

With all of this work out of the way, we can start getting down to strategy.

First, what talent should WWE pursue? Advise carefully.
Kenta Kobashi, Hiroshi Tanahashi, Kenny Omega. Each of these wrestlers have a high rating and have been successful in the past. They would have immediate recogniziability from audiences and would help boost the WWE's ratings.

Second, reconcile what you found in steps 3 and 4 with Netflix's relationship with WWE.

 Use the data from the following page to help make your case: 
 https://wrestlenomics.com/tv-ratings/

 ```{python}
wwe_ratings = requests.get('https://wrestlenomics.com/tv-ratings/')

ratings_soup = BeautifulSoup(wwe_ratings.content, features = "html.parser")

ratings_table = ratings_soup.select('table', class_="medium datawrapper-ld8Jf-1k2zto9 svelte-zr2lpq striped compact resortable desktop-only")

 ```
The ratings are current low, but the stock price has been the highest since it's been since the pandemic. One of the places that the WWE could prioritize is the WWE NXT route for their developmental talent. This would help them to continue to find growth and to help them to continue to find success in the future.

Third, do you have any further recommendations for WWE?

Like I just mentioned, I think that the WWE should prioritize their developmental talent in the WWE NXT to continue to find growth. WWE Raw seems to be doing alright, but could still have some risk involved for future investors. Having the listed target wrestlers as well incorporated into this would be a time for young talent to compete against the best of the best while also giving more TV time for these wrestlers.